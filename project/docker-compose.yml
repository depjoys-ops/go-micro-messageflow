services:
  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/build/docker/Dockerfile
    image: broker-service
    container_name: broker-service
    volumes:
      - ./../broker-service/config:/usr/local/bin/config
    environment:
      - CONFIG_PATH=/usr/local/bin/config/config.yaml
    restart: always
    ports:
      - "4000:80"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - postgres-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - messageflow

  auth-service:
    build:
      context: ./../auth-service
      dockerfile: ./../auth-service/build/docker/Dockerfile
    image: auth-service
    container_name: auth-service
    volumes:
      - ./../auth-service/config:/usr/local/bin/config
    environment:
      - CONFIG_PATH=/usr/local/bin/config/config.yaml
    restart: always
    ports:
      - "4001:80"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - postgres-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - messageflow

  postgres-service:
    image: postgres:16-alpine
    container_name: postgres-service
    ports:
      - "5433:5432" #psql -h localhost -p 5433 -U postgres
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/messageflow
    volumes:
      - messageflow:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - messageflow

volumes:
  messageflow:

networks:
  messageflow:
